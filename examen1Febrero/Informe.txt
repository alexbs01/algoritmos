# Algoritmos, examen práctico

Grupo 3.1
- AUTOR: Alejandro Becerra Suárez  LOGIN: a.becerra

La práctica fue realizada con el siguiente dispositivo:

- **Hardware**: AMD 9620P 3.2 GHz (16 GB RAM)
- **OS**: Ubuntu 22.04.1 LTS x86_64
- **Kernel**: 5.15.0-47-generic

## Introducción

El objetivo es calcular de forma empírica la complejidad computacional del 
algoritmo de ordenación dado.

Los **tiempos** de las siguientes tablas estarán en **microsegundos (us)**, 
además también se dará una cota subestimada, ajustada y sobreestimada cada 
tiempo calculado.

Cuando **un tiempo es inferior a 500 microsegundos**, se ejecutará 10 veces más
que la última vez, guardando un contador de cuantas veces se tuvo que ejecutar 
para ser mayor que 500 microsegundos. Una vez hecho esto se calcula la media.

El **tamaño** de las entradas (los arrays) será de **razón 2** comenzando en 
500 (500, 1000, 2000, ...) y terminando 512000, siempre y cuando no se exceda 
del tiempo máximo de 5 segundos.

## Nomenclatura de las tablas
- **N**: Cantidad de números del array.
- **I**: Número de veces que se repite el algoritmo.
- **T**: Tiempo medio en microsegundos (us).
- **T/CSub**: Tiempo medio entre la Cota Subestimada.
- **T/CAjus**: Tiempo medio entre la Cota Ajustada calculada.
- **T/CSobre**: Tiempo medio entre la Cota Sobreestimada.

## Mediciones

Tiempos de ordenación con array ALEATORIO:

   [N]		   [I]		     [T]		   [T/CSub]	     [T/CAjus]	  [T/CSobre]

     500	   100	      43.060000	      0.086120	      0.034116	    0.002069
    1000	    10	     109.000000	      0.109000	      0.038943	    0.001728
    2000	     1	     523.000000	      0.261500	      0.084259	    0.002734
    4000	     1	     544.000000	      0.136000	      0.039521	    0.000938
    8000	     1	    1199.000000	      0.149875	      0.039280	    0.000682
   16000	     1	    3063.000000	      0.191438	      0.045249	    0.000575
   32000	     1	    6364.000000	      0.198875	      0.042395	    0.000394
   64000	     1	   13556.000000	      0.211812	      0.040722	    0.000277
  128000	     1	   30440.000000	      0.237813	      0.041234	    0.000205
  256000	     1	   62429.000000	      0.243863	      0.038135	    0.000139
  512000	     1	  136007.000000	      0.265639	      0.037464	    0.000100

- **CSub**: pow(N, 1.8)  
- **CAjus**: pow(N, 1.99)
- **CSobre**: pow(N, 2.2)

El tiempo entre la cota ajustada tiende a 0.037 y 0.038

*********************************************************
Tiempos de ordenación con array ASCENDENTE:

   [N]		    [I]		 [T]		      [T/CSub]	     [T/CAjus]	  [T/CSobre]

     500	     1	    738.000000	      0.035457	      0.002952	    0.001586
    1000	     1	   1598.000000	      0.025327	      0.001598	    0.000801
    2000	     1	   4618.000000	      0.024144	      0.001154	    0.000540
    4000	     1	  22782.000000	      0.039291	      0.001424	    0.000621
    8000	     1	  73872.000000	      0.042028	      0.001154	    0.000470
   16000	     1	 277061.000000	      0.051998	      0.001082	    0.000411
   32000	     1	1070217.000000	      0.066257	      0.001045	    0.000370

- **CSub**: pow(N, 1)  
- **CAjus**: pow(N, 1.49)
- **CSobre**: pow(N, 1.6)

El tiempo entre la cota ajustada tiende a 0.00104 y 0.00108

*********************************************************
Tiempos de ordenación con array DESCENDENTE

   [N]		    [I]		 [T]		      [T/CSub]	     [T/CAjus]	  [T/CSobre]
 
     500	     1	    737.000000	      0.005488	      0.000851	    0.000245
    1000	     1	   2796.000000	      0.005579	      0.000702	    0.000176
    2000	     1	  14585.000000	      0.007797	      0.000797      0.000174
    4000	     1	  54079.000000	      0.007747	      0.000643      0.000122
    8000	     1	 229610.000000	      0.008813	      0.000595	    0.000099
   16000	     1	 910067.000000	      0.009359	      0.000513	    0.000074
  
- **CSub**: pow(N, 1.6)  
- **CAjus**: pow(N, 2)
- **CSobre**: pow(N, 2.1)
 
El tiempo entre la cota ajustada tiende a 0.000513 y 0.000595

## Conclusiones

Anomalías: En cada tabla hay una anomalía en la primera medición que supera los
500 microsegundos. Lo más probable es que sea causado por el la característica 
del procesador de los portátiles de estar en modo de ahorro de energía en 
función de la carga que reciben. Esta anomalía se minimizó con una función que
saca al procesador de este estado.  
 
Como podemos observar, la mejor situación de este algoritmo se da cuando debe 
ordenar un array desordenado, después cuando está ordenado de forma ascendente
y por último cuando lo está de forma descendente. Esto sucede porque cuando está
ordenado de cualquiera de las dos formas, realiza intercambios de más que 
posteriormente debe deshacer 

