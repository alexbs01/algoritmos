# Práctica 4, Montículos

## Autores, grupo 3.1
- Alejandro Becerra Suárez, a.becerra
- Adrián Rego Criado, adrian.rego
- Miguel Cortón Debén, m.cortond

## Características de la máquina
- **Hardware**:  11th Gen Intel i7-1165G7 (8) @ 2.80 GHz (16 Gb RAM)
- **OS**: Ubuntu 22.04.1 LTS x86_64
- **Kernel**: 5.15.0-47-generic

## Introducción
El objetivo de esta práctica es **calcular la complejidad computacional**, de
forma empírica y compararla con la teórica dada en el enunciado de la práctica,
en la creación de montículos, y en la ordenación de elementos a través de estos
usando arrays ordenados de forma ascendente, descendente y desordenados.

La **reserva** y **liberado** de memoria se comprobó con **valgrind** para
verificar que toda la memoria reservada para los nodos tiene su posterior free.

Los **tiempos** de las siguientes tablas estarán en **microsegundos (us)**,
además también se dará una cota subestimada, ajustada y sobreestimada
cada tiempo calculado.

Cuando **un tiempo es inferior a 500 microsegundos**, se ejecutará 10 veces más
que la última vez, guardando un contador de cuantas veces se tuvo que ejecutar
para ser mayor que 500 microsegundos. Una vez hecho esto se calcula la media.

El **tamaño** de las entradas (los arrays) será de **razón 2** comenzando
en 500 (500, 1000, 2000, ...) y terminando 512000.


## Nomenclatura de las tablas
- **N**: Cantidad de números del array insertado en el montículo.
- **I**: Número de veces que se repite el algoritmo.
- **T**: Tiempo medio de crear_monticulo o de ord_monticulo en microsegundos (us).
- **T/CAjusTeo**: Tiempo medio entre la Cota Ajustada Teórica.
- **T/CSub**: Tiempo medio entre la Cota Subestimada.
- **T/CAjus**: Tiempo medio entre la Cota Ajustada.
- **T/CSobre**: Tiempo medio entre la Cota Sobreestimada.


## Inserción de n elementos ordenados ascendentemente en crear_monticulo:

|   [N]  | [I] |     [T]     | [T/CAjusTeo] | [T/CSub] | [T/CAjus] | [T/CSobre] |
|:------:|:---:|:-----------:|:------------:|:--------:|:---------:|:----------:|
|    500 | 100 |    5.050000 |     0.010100 | 0.018803 |  0.008920 |   0.005425 |
|   1000 | 100 |   10.470000 |     0.010470 | 0.020890 |  0.009119 |   0.005247 |
|   2000 | 100 |   21.780000 |     0.010890 | 0.023288 |  0.009354 |   0.005092 |
|   4000 | 100 |   41.690000 |     0.010422 | 0.023888 |  0.008829 |   0.004547 |
|   8000 |  10 |   91.600000 |     0.011450 | 0.028126 |  0.009566 |   0.004661 |
|  16000 |  10 |  186.500000 |     0.011656 | 0.030688 |  0.009605 |   0.004427 |
|  32000 |  10 |  393.100000 |     0.012284 | 0.034663 |  0.009983 |   0.004353 |
|  64000 |   1 |  715.000000 |     0.011172 | 0.035787 |  0.008954 |   0.003794 |
| 128000 |   1 | 1477.000000 |     0.011539 | 0.037402 |  0.009121 |   0.003560 |
| 256000 |   1 | 2968.000000 |     0.011594 | 0.040276 |  0.009038 |   0.003337 |
| 512000 |   1 | 5845.000000 |     0.011416 | 0.042505 |  0.008777 |   0.003066 |

- **CAjusTeo**: n
- **CSub**: pow(n, 0.9)
- **CAjus**: pow(n, 1.02)
- **CSobre**: pow(n, 1.1)

Con esta tabla vemos que la cota ajustada está tendiendo a 0.009.

**No hay anomalías**.

## Inserción de n elementos ordenados ascendentemente en ord_monticulo:

|   [N]  | [I] |      [T]     | [T/CAjusTeo] | [T/CSub] | [T/CAjus] | [T/CSobre] |
|:------:|:---:|:------------:|:------------:|:--------:|:---------:|:----------:|
|    500 | 100 |    30.760000 |     0.009899 | 0.114528 |  0.035165 |   0.017751 |
|   1000 |  10 |   102.600000 |     0.014853 | 0.204714 |  0.055099 |   0.025772 |
|   2000 |  10 |   195.700000 |     0.012873 | 0.209249 |  0.049371 |   0.021397 |
|   4000 |   1 |   805.000000 |     0.024264 | 0.461256 |  0.095400 |   0.038311 |
|   8000 |   1 |   773.000000 |     0.010751 | 0.237355 |  0.043034 |   0.016013 |
|  16000 |   1 |  1715.000000 |     0.011073 | 0.282199 |  0.044851 |   0.015464 |
|  32000 |   1 |  3406.000000 |     0.010261 | 0.300338 |  0.041844 |   0.013368 |
|  64000 |   1 |  7247.000000 |     0.010232 | 0.342449 |  0.041824 |   0.012381 |
| 128000 |   1 | 15664.000000 |     0.010406 | 0.396656 |  0.042466 |   0.011648 |
| 256000 |   1 | 32241.000000 |     0.010113 | 0.437515 |  0.041061 |   0.010436 |
| 512000 |   1 | 69141.000000 |     0.010272 | 0.502797 |  0.041365 |   0.009741 |

- **CAjusTeo**: n * log n
- **CSub**: pow(n, 0.9)
- **CAjus**: pow(n, 1.09)
- **CSobre**: pow(n, 1.2)

Con esta tabla vemos que la cota ajustada está tendiendo a 0.041.

**Hay anomalías para n = 1000, 2000 y 4000**.

## Inserción de n elementos ordenados descendentemente en ord_monticulo:

|   [N]  | [I] |      [T]     | [T/CAjusTeo] | [T/CSub] | [T/CAjus] | [T/CSobre] |
|:------:|:---:|:------------:|:------------:|:--------:|:---------:|:----------:|
|    500 | 100 |    25.630000 |     0.008248 | 0.095428 |  0.029300 |   0.014791 |
|   1000 |  10 |    82.700000 |     0.011972 | 0.165008 |  0.044413 |   0.020773 |
|   2000 |  10 |   203.000000 |     0.013354 | 0.217055 |  0.051212 |   0.022195 |
|   4000 |   1 |   759.000000 |     0.022878 | 0.434898 |  0.089949 |   0.036122 |
|   8000 |   1 |   834.000000 |     0.011600 | 0.256086 |  0.046430 |   0.017277 |
|  16000 |   1 |  1637.000000 |     0.010569 | 0.269365 |  0.042811 |   0.014761 |
|  32000 |   1 |  3515.000000 |     0.010589 | 0.309949 |  0.043183 |   0.013796 |
|  64000 |   1 |  7514.000000 |     0.010609 | 0.355066 |  0.043365 |   0.012837 |
| 128000 |   1 | 16096.000000 |     0.010693 | 0.407595 |  0.043637 |   0.011969 |
| 256000 |   1 | 33319.000000 |     0.010452 | 0.452143 |  0.042434 |   0.010785 |
| 512000 |   1 | 70555.000000 |     0.010482 | 0.513080 |  0.042211 |   0.009940 |

- **CAjusTeo**: n * log n
- **CSub**: pow(n, 0.9)
- **CAjus**: pow(n, 1.09)
- **CSobre**: pow(n, 1.2)

Con esta tabla vemos que la cota ajustada está tendiendo a 0.0425.

**Hay anomalías para n = 500, 1000 y 2000**.

## Inserción de n elementos ordenados aleatoriamente en ord_monticulo:

|   [N]  | [I] |      [T]      | [T/CAjusTeo] | [T/CSub] | [T/CAjus] | [T/CSobre] |
|:------:|:---:|:-------------:|:------------:|:--------:|:---------:|:----------:|
|    500 |  10 |     51.400000 |     0.016542 | 0.191377 |  0.058761 |   0.029662 |
|   1000 |  10 |    114.900000 |     0.016633 | 0.229256 |  0.061705 |   0.028862 |
|   2000 |  10 |    246.300000 |     0.016202 | 0.263352 |  0.062136 |   0.026930 |
|   4000 |   1 |    504.000000 |     0.015192 | 0.288786 |  0.059729 |   0.023986 |
|   8000 |   1 |   1083.000000 |     0.015063 | 0.332543 |  0.060292 |   0.022435 |
|  16000 |   1 |   2172.000000 |     0.014023 | 0.357398 |  0.056803 |   0.019585 |
|  32000 |   1 |   4752.000000 |     0.014315 | 0.419026 |  0.058380 |   0.018651 |
|  64000 |   1 |  10333.000000 |     0.014589 | 0.488275 |  0.059633 |   0.017653 |
| 128000 |   1 |  22043.000000 |     0.014644 | 0.558190 |  0.059760 |   0.016392 |
| 256000 |   1 |  46856.000000 |     0.014698 | 0.635842 |  0.059674 |   0.015166 |
| 512000 |   1 | 100430.000000 |     0.014921 | 0.730332 |  0.060084 |   0.014149 |

- **CAjusTeo**: n * log n
- **CSub**: pow(n, 0.9)
- **CAjus**: pow(n, 1.09)
- **CSobre**: pow(n, 1.2)

Con esta tabla vemos que la cota ajustada está tendiendo a 0.06.

**No hay anomalías**.








## Conclusiones

### Complejidades

Se calcularon a través de hacer una **nube de puntos** con las coordenadas
de *(N, Tiempo)* múltiples veces, y calcular una **función exponencial** que
pase lo más cerca posible por todos los puntos.

#### Inserción
- **Caso medio**: O(pow(n, 1.28))

#### Búsqueda
- **Caso medio**: O(pow(n, 1.25))

Tras el análisis de los tiempos de inserción y búsqueda, podemos concluir que
por lo general, **la inserción es más rápida**.

La inserción de n elementos en un árbol vacío, lleva consigo hacer una reserva
de memoria para la creación de los nodos, esta reserva es relativamente
costosa. Pero no es lo suficientemente lenta como para ser más lento que la
búsqueda.

La búsqueda de n elementos sobre un árbol de n elementos, se realiza con un
array de n números aleatorios, que pueden coincidir con los que hay en el árbol
o no. El caso en el que un elemento del array no esté en el árbol, hará que se
tenga que bajar hasta una hoja, lo cual tiene un coste de tiempo superior al de
reservar memoria y crear nodos para después insertarlos.
